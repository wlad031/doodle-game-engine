CMAKE_MINIMUM_REQUIRED(VERSION 3.3.0)
PROJECT(DoodleGameEngine)

FUNCTION(PRINT_VARIABLES)
    GET_CMAKE_PROPERTY(_variableNames VARIABLES)
    FOREACH (_variableName ${_variableNames})
        MESSAGE(STATUS "${_variableName}=${${_variableName}}")
    ENDFOREACH ()
ENDFUNCTION()

IF (UNIX AND NOT APPLE)
    SET(LINUX TRUE)
ENDIF ()

# Set some useful path-variables
SET(BUILD_DIRECTORY_NAME "build")
SET(INCLUDE_DIRECTORY_NAME "include")
SET(BINARY_DIRECTORY_NAME "bin")
SET(LIB_DIRECTORY_NAME "lib")
SET(ARCHIVE_DIRECTORY_NAME "archive")

SET(PROJECT_DIRECTORY \"${PROJECT_SOURCE_DIR}/\")
SET(PROJECT_LIB_DIRECTORY ${PROJECT_SOURCE_DIR}/${LIB_DIRECTORY_NAME})

SET(
        CMAKE_ARCHIVE_OUTPUT_DIRECTORY
        ${PROJECT_SOURCE_DIR}/${BUILD_DIRECTORY_NAME}/${ARCHIVE_DIRECTORY_NAME}
)
SET(
        CMAKE_LIBRARY_OUTPUT_DIRECTORY
        ${PROJECT_SOURCE_DIR}/${BUILD_DIRECTORY_NAME}/${LIB_DIRECTORY_NAME}
)
SET(
        CMAKE_RUNTIME_OUTPUT_DIRECTORY
        ${PROJECT_SOURCE_DIR}/${BUILD_DIRECTORY_NAME}/${BINARY_DIRECTORY_NAME}
)

SET_TARGET_PROPERTIES(
        PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY CMAKE_ARCHIVE_OUTPUT_DIRECTORY
        LIBRARY_OUTPUT_DIRECTORY CMAKE_LIBRARY_OUTPUT_DIRECTORY
        RUNTIME_OUTPUT_DIRECTORY CMAKE_RUNTIME_OUTPUT_DIRECTORY
)

<<<<<<< HEAD
INCLUDE(ExternalProject)

SET(EASYLOGGINGPP_NAME Easyloggingpp)
SET(
        EASYLOGGINGPP_DIRECTORY
        ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${EASYLOGGINGPP_NAME}
)
SET(
        EASYLOGGINGPP_BUILD_DIRECTORY
        ${EASYLOGGINGPP_DIRECTORY}/${BUILD_DIRECTORY_NAME}
)
SET(
        EASYLOGGINGPP_INCLUDE
        ${EASYLOGGINGPP_BUILD_DIRECTORY}/INSTALL/include
)
=======
# Some multithreading options
SET(CMAKE_THREAD_LIBS_INIT "-lpthread")
SET(CMAKE_HAVE_THREADS_LIBRARY 1)
SET(CMAKE_USE_WIN32_THREADS_INIT 0)
SET(CMAKE_USE_PTHREADS_INIT 1)

# Linker options
STRING(
        CONCAT
        LINKER_FLAGS

        " ${CMAKE_EXE_LINKER_FLAGS} "
        " -lGLU                     "
        " -pthread                  "
        " -lncurses                 "
)
SET(CMAKE_EXE_LINKER_FLAGS "${LINKER_FLAGS}")

# Compiler options
IF (APPLE)
    STRING(
            CONCAT
            COMPILER_FLAGS
            " ${CMAKE_CXX_FLAGS} "

            " -w                 "
    )
ELSEIF (LINUX)
    STRING(
            CONCAT
            COMPILER_FLAGS
            " ${CMAKE_CXX_FLAGS} "

            " -std=c++17         "
            " -w                 "
    )
ENDIF ()

SET(CMAKE_EXE_LINKER_FLAGS "${LINKER_FLAGS}")
SET(CMAKE_CXX_FLAGS "${COMPILER_FLAGS}")

# Add external projects
INCLUDE(ExternalProject)

SET(EASYLOGGINGPP_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Easyloggingpp)
SET(EASYLOGGINGPP_BUILD_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${BUILD_DIRECTORY}/Easyloggingpp)
EXTERNALPROJECT_ADD(
        Easyloggingpp
        GIT_REPOSITORY https://github.com/easylogging/easyloggingpp
        GIT_TAG v9.83
        SOURCE_DIR ${EASYLOGGINGPP_DIRECTORY}
        BINARY_DIR ${EASYLOGGINGPP_BUILD_DIRECTORY}
        UPDATE_COMMAND ""
        PATCH_COMMAND ""
        CMAKE_GENERATOR ${gen}
        CMAKE_ARGS
        ${ep_common_args}
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_INSTALL_PREFIX:PATH=${EASYLOGGINGPP_BUILD_DIRECTORY}/INSTALL
)
INCLUDE_DIRECTORIES("${EASYLOGGINGPP_INCLUDE}")

SET(EASYLOGGINGPP_INCLUDE ${CMAKE_BINARY_DIR}/INSTALL/include)

# Assimp
SET(ASSIMP_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/Assimp)
SET(ASSIMP_BUILD_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${BUILD_DIRECTORY}/Assimp)
EXTERNALPROJECT_ADD(Assimp
                    GIT_REPOSITORY https://github.com/assimp/assimp
                    GIT_TAG v3.3.1
                    SOURCE_DIR ${ASSIMP_DIRECTORY}
                    BINARY_DIR ${ASSIMP_BUILD_DIRECTORY}
                    UPDATE_COMMAND ""
                    PATCH_COMMAND ${CMAKE_COMMAND} -E copy ${ASSIMP_DIRECTORY}/CMakeLists.txt ${CMAKE_BINARY_DIR}/Assimp/CMakeLists.txt
                    CMAKE_GENERATOR ${gen}
                    CMAKE_ARGS
                    ${ep_common_args}
                    -DCMAKE_BUILD_TYPE:STRING=Release
                    -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_BINARY_DIR}/INSTALL)
SET(ASSIMP_INCLUDE ${ASSIMP_BUILD_DIRECTORY}/include)

# RapidJSON
SET(RAPID_JSON_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/RapidJSON)
SET(RAPID_JSON_BUILD_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${BUILD_DIRECTORY}/RapidJSON)
EXTERNALPROJECT_ADD(
        RapidJSON
        GIT_REPOSITORY https://github.com/miloyip/rapidjson
        GIT_TAG v1.1.0
        SOURCE_DIR ${RAPID_JSON_DIRECTORY}
        BINARY_DIR ${RAPID_JSON_BUILD_DIRECTORY}
        UPDATE_COMMAND ""
        PATCH_COMMAND ${CMAKE_COMMAND} -E copy ${RAPID_JSON_DIRECTORY}/CMakeLists.txt ${CMAKE_BINARY_DIR}/RapidJSON/CMakeLists.txt
        CMAKE_GENERATOR ${gen}
        CMAKE_ARGS
        ${ep_common_args}
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_BINARY_DIR}/INSTALL
)
SET(RAPID_JSON_INCLUDE ${RAPID_JSON_BUILD_DIRECTORY}/include)

SET(JSON_DTO_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/json_dto)
EXTERNALPROJECT_ADD(
        json_dto
        GIT_REPOSITORY https://github.com/wlad031/json_dto-0.1
        SOURCE_DIR ${JSON_DTO_DIRECTORY}
        BINARY_DIR ${JSON_DTO_BUILD_DIRECTORY}
        PATCH_COMMAND ${CMAKE_COMMAND} -E copy_directory ${JSON_DTO_DIRECTORY}/dev/json_dto ${RAPID_JSON_INCLUDE}/json_dto
        BUILD_IN_SOURCE 1
        CONFIGURE_COMMAND ""
        BUILD_COMMAND ""
        INSTALL_COMMAND ""
)
SET(JSON_DTO_INCLUDE ${JSON_DTO_BUILD_DIRECTORY}/dev)

FIND_PACKAGE(PkgConfig REQUIRED)
FIND_PACKAGE(Curses REQUIRED)
FIND_PACKAGE(Boost REQUIRED system filesystem thread timer chrono)
FIND_PACKAGE(glbinding REQUIRED)
FIND_PACKAGE(GLFW REQUIRED)
FIND_PACKAGE(SFML REQUIRED)
FIND_PACKAGE(Assimp REQUIRED)
FIND_PACKAGE(Bullet REQUIRED)

PRINT_VARIABLES()

# Add sources
FILE(
        GLOB_RECURSE
        SOURCE_FILES

        "entrypoint.cpp"
        "src/*.cpp"
        "src/*.hpp"
)

ADD_EXECUTABLE(
        DoodleGameEngine
        ${SOURCE_FILES}
)

TARGET_COMPILE_FEATURES(DoodleGameEngine PUBLIC cxx_std_1z)
TARGET_INCLUDE_DIRECTORIES(
        DoodleGameEngine INTERFACE
        src/
        "${PROJECT_BINARY_DIR}    "

        "${Boost_INCLUDE_DIRS}    "
        "${CURSES_INCLUDE_DIR}    "
        "${GLFW_INCLUDE_DIR}      "
        "${SFML_INCLUDE_DIR}      "
        "${ASSIMP_INCLUDE_DIRS}   "
        "${BULLET_INCLUDE_DIRS}   "

        "${EASYLOGGINGPP_INCLUDE} "
        "${RAPID_JSON_INCLUDE}    "
        "${JSON_DTO_INCLUDE}      "
)

TARGET_LINK_LIBRARIES(
        DoodleGameEngine

        ${Boost_LIBRARIES}
        ${GLFW_LIBRARIES}
        ${SFML_LIBRARIES}
        ${BULLET_LIBRARIES}
        /usr/lib/x86_64-linux-gnu/libassimp.so # TODO: change!
        ${CURSES_LIBRARIES}
        glbinding::glbinding
)

ADD_DEPENDENCIES(
        DoodleGameEngine

        Easyloggingpp
        Assimp
        RapidJSON
        json_dto
)

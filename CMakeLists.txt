CMAKE_MINIMUM_REQUIRED(VERSION 3.3.0)
PROJECT(DoodleGameEngine)
SET(TARGET "DoodleGameEngine")

FUNCTION (PRINT_VARIABLES)
    MESSAGE(STATUS "Found the following variables:")
    GET_CMAKE_PROPERTY(_variableNames VARIABLES)
    FOREACH (_variableName ${_variableNames})
        MESSAGE(STATUS "  ${_variableName}=${${_variableName}}")
    ENDFOREACH ()
ENDFUNCTION ()

IF (UNIX AND NOT APPLE)
    SET(LINUX TRUE)
ENDIF ()

# Set some useful path-variables
SET(BUILD "build")
SET(INCLUDE "include")
SET(BINARY "bin")
SET(LIB "lib")
SET(ARCHIVE "archive")
SET(SHADERS "shaders")

SET(PROJECT_DIRECTORY \"${PROJECT_SOURCE_DIR}/\")
SET(PROJECT_LIB_DIRECTORY ${PROJECT_SOURCE_DIR}/${LIB})

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/${BUILD}/${ARCHIVE})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/${BUILD}/${LIB})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/${BUILD}/${BINARY})

SET(INCLUDE_DIRECTORY \"${ABSOLUTE_SOURCE_DIR}/${INCLUDE}/\")
SET(SHADERS_DIRECTORY \"${ABSOLUTE_SOURCE_DIR}/${SHADERS}/\")

SET_TARGET_PROPERTIES(
        PROPERTIES
        ARCHIVE_OUTPUT_DIRECTORY CMAKE_ARCHIVE_OUTPUT_DIRECTORY
        LIBRARY_OUTPUT_DIRECTORY CMAKE_LIBRARY_OUTPUT_DIRECTORY
        RUNTIME_OUTPUT_DIRECTORY CMAKE_RUNTIME_OUTPUT_DIRECTORY
)

# Some multithreading options
SET(CMAKE_THREAD_LIBS_INIT "-lpthread")
SET(CMAKE_HAVE_THREADS_LIBRARY 1)
SET(CMAKE_USE_WIN32_THREADS_INIT 0)
SET(CMAKE_USE_PTHREADS_INIT 1)

# Add sources
FILE(
        GLOB_RECURSE
        SOURCE_FILES

        "src/entrypoint.cpp"
        "src/*.cpp"
        "src/*.hpp"
)

ADD_EXECUTABLE(${TARGET} ${SOURCE_FILES})

# Add external projects
INCLUDE(ExternalProject)

# Easyloggingpp
SET(LIBRARY_NAME Easyloggingpp)
SET(
        EASYLOGGINGPP_DIRECTORY
        ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${LIBRARY_NAME}
)
SET(
        EASYLOGGINGPP_INCLUDE
        ${EASYLOGGINGPP_DIRECTORY}/${INCLUDE}
)
EXTERNALPROJECT_ADD(
        ${LIBRARY_NAME}
        PREFIX ${EASYLOGGINGPP_DIRECTORY}
        GIT_REPOSITORY https://github.com/easylogging/easyloggingpp
        GIT_TAG v9.83
        UPDATE_COMMAND ""
        PATCH_COMMAND ""
        CMAKE_GENERATOR ${gen}
        CMAKE_ARGS ${ep_common_args}
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
)
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC "${EASYLOGGINGPP_INCLUDE}")

# RapidJSON
SET(LIBRARY_NAME RapidJSON)
SET(
        RAPID_JSON_DIRECTORY
        ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${LIBRARY_NAME}
)
SET(
        RAPID_JSON_INCLUDE
        ${RAPID_JSON_DIRECTORY}/${INCLUDE}
)
EXTERNALPROJECT_ADD(
        ${LIBRARY_NAME}
        PREFIX ${RAPID_JSON_DIRECTORY}
        GIT_REPOSITORY https://github.com/miloyip/rapidjson
        GIT_TAG v1.1.0
        UPDATE_COMMAND ""
        CMAKE_GENERATOR ${gen}
        CMAKE_ARGS ${ep_common_args}
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_INSTALL_PREFIX:PATH=${RAPID_JSON_DIRECTORY}
)
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC "${RAPID_JSON_INCLUDE}")

# json_dto
SET(LIBRARY_NAME json_dto)
SET(
        JSON_DTO_DIRECTORY
        ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${LIBRARY_NAME}
)
SET(
        JSON_DTO_INCLUDE
        ${JSON_DTO_DIRECTORY}/${INCLUDE}
)
EXTERNALPROJECT_ADD(
        ${LIBRARY_NAME}
        PREFIX ${JSON_DTO_DIRECTORY}
        DEPENDS RapidJSON
        GIT_REPOSITORY https://github.com/wlad031/json_dto-0.1
        BUILD_COMMAND ${CMAKE_COMMAND} -E copy_directory
        ${JSON_DTO_DIRECTORY}/src/json_dto/dev/json_dto
        ${JSON_DTO_DIRECTORY}/include/json_dto
        BUILD_IN_SOURCE 1
        CONFIGURE_COMMAND ""
        PATCH_COMMAND ""
        INSTALL_COMMAND ""
)
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC "${JSON_DTO_INCLUDE}")

PRINT_VARIABLES()

FIND_PACKAGE(PkgConfig REQUIRED)

FIND_PACKAGE(Curses REQUIRED)
TARGET_LINK_LIBRARIES(${TARGET} ${CURSES_LIBRARIES})
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC "${CURSES_INCLUDE_DIR}")

FIND_PACKAGE(Boost REQUIRED system filesystem thread timer chrono)
TARGET_LINK_LIBRARIES(${TARGET} ${Boost_LIBRARIES})
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC "${Boost_INCLUDE_DIRS}")

FIND_PACKAGE(glbinding REQUIRED)
TARGET_LINK_LIBRARIES(${TARGET} ${GLBINDING_LIBRARIES})
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC "${GLBINDING_INCLUDE_DIRS}")

FIND_PACKAGE(GLFW REQUIRED)
TARGET_LINK_LIBRARIES(${TARGET} ${GLFW_LIBRARIES})
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC "${GLFW_INCLUDE_DIR}")

FIND_PACKAGE(SFML REQUIRED)
TARGET_LINK_LIBRARIES(${TARGET} ${SFML_LIBRARIES})
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC "${SFML_INCLUDE_DIR}")

FIND_PACKAGE(Assimp REQUIRED)
TARGET_LINK_LIBRARIES(${TARGET} ${assimp_LIBRARIES})
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC "${ASSIMP_INCLUDE_DIRS}")

FIND_PACKAGE(Bullet REQUIRED)
TARGET_LINK_LIBRARIES(${TARGET} ${BULLET_LIBRARIES})
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC "${BULLET_INCLUDE_DIRS}")

# Passing variables from CMake to source code
CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/cmake.h.in" "${PROJECT_BINARY_DIR}/cmake.h")

TARGET_COMPILE_FEATURES(${TARGET} PUBLIC cxx_std_17)
TARGET_INCLUDE_DIRECTORIES(${TARGET} PUBLIC src/ "${PROJECT_BINARY_DIR}")

ADD_DEPENDENCIES(
        ${TARGET}

        Easyloggingpp
        RapidJSON
        json_dto
)
